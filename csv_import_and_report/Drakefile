; Drakefile creating Postgres and Sqlite database tables from a CSV file
; and a BIRT report template that only contains a Sqlite data source
; Usage:

;   drake -v TABLE_NAME=<table name> %load_sqlite %rename_template

; where <table_name> is the name of the database table created

; To run this script the CSV data file needs to be in the same folder as the Drakefile and it must be named data.csv

; TODO: better file input and output management. Dropbox perhaps?

DB_USER=flow
VENV_PYTHON=/home/gabriel/.envs/drake/bin/python


; run the python script that takes the .csv and returns the CREATE TABLE SQL
create.sql <- data.csv, csv_to_table_def.py
    $VENV_PYTHON $INPUT1 $TABLE_NAME > $OUTPUT


; create the Postgres database table
; create_pg.log is a log file of the output of running the Prostgres commands
create_pg.log <- create.sql, data.csv
    # remove an old instance of the table
    psql -U postgres -d flow -c "DROP TABLE IF EXISTS $TABLE_NAME;" > $OUTPUT
    # run the SQL creating the table
    psql -U postgres -d flow -c "$(cat $INPUT0)" >> $OUTPUT
    # copy the .csv data into the new table
    psql -U postgres -d flow -c "COPY $TABLE_NAME FROM '$INPUT1' DELIMITER ',' CSV HEADER;" >> $OUTPUT
    # set privileges on the table
    psql -U postgres -d flow -c "GRANT ALL ON $TABLE_NAME TO $DB_USER;" >> $OUTPUT


; create a sqlite-compatible CSV file (tab delimited)
data.sqlite.csv <- data.csv, csv_delim_change.py
    /home/gabriel/.envs/drake/bin/python $INPUT1 > $OUTPUT


; create the sqlite commands to create the table and import the CSV data
sqlite_commands.txt <- create.sql, data.sqlite.csv
    # the CREATE TABLE SQL
    echo "$(cat $INPUT0)" > $OUTPUT
    # CSV import setup
    echo '.separator "\t"' >> $OUTPUT
    echo ".header off" >> $OUTPUT
    # import CSV
    echo ".import data.sqlite.csv $TABLE_NAME" >> $OUTPUT


; run the sqlite commands
%load_sqlite <- sqlite_commands.txt
    rm -f $TABLE_NAME.sqlite
    sqlite3 $TABLE_NAME.sqlite < $INPUT


; create a blank BIRT template with the sqlite datasource
blank_for_use_with_DBNAME.rptdesign <- blank_with_sqlite.rptdesign.template [python]
    import os
    with open('$[INPUT]', 'r') as input, open('$[OUTPUT]', 'w') as output:
        s = input.read()
        template_path = os.path.join('FULL_PATH_HERE]', '$[TABLE_NAME].sqlite')
        s = s.replace('{SQLITE_DB}', template_path)
        s = s.replace('{TABLE_NAME}', '$[TABLE_NAME]')
        output.write(s)

%rename_template <- blank_for_use_with_DBNAME.rptdesign
    mv $INPUT ${INPUT/DBNAME/$TABLE_NAME}